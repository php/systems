#!/bin/sh

BASEDIR=/local/src/phpdoc-git/
TIMESTAMP=`/bin/date +%Y-%m-%d-%H`
PHDROOT=/local/src/phd
LOGFOLDER=/local/logs/docs/
OUTPUTFOLDER=/local/building/
DOCSWEB=/local/Web/sites/docs.php.net/
PHP="/usr/bin/php -dmemory_limit=1024M"


HOUR=`/bin/date +%H`

# Only run this 6 times a day, or when explicitly given an language to build (i.e. from cli)
if [ `expr $HOUR % 4` -ne 0 ]; then
	if [ $# -ne 1 ]; then
		exit 0
	fi
fi

configure()
{
	lang=$1
	outputfile=$2 

	log "Configuring $lang"
	pushd $BASEDIR
	$PHP base/configure.php --with-lang=$lang --output=$outputfile --disable-segfault-speed >> $LOGFILE 2>&1
	if [ "$?" -ne 0 ]; then
		broken_lang $lang
		popd
		return 187
	fi
	popd
	log "Finished configuring"
}

build()
{
	lang=$1
	docbook=$2
	out=$OUTPUTFOLDER/$lang

	log "Building $lang"

	pushd $PHDROOT
	rm -rf $out

	log "Rendering xhtml, bigxhtml, php and tocfeed"
	$PHP render.php -P PHP -d $docbook -f xhtml -f bigxhtml -f php -f tocfeed --output $out >> $LOGFILE 2>&1
	if [ "$?" -ne 0 ]; then
		broken_lang $lang
		popd
		return 187
	fi

	case $lang in
		en)
			log "Rendering funclist, xml and sqlite (IDE)"
			$PHP render.php -P IDE -d $docbook -f funclist -f xml -f sqlite --output $out >> $LOGFILE 2>&1
			if [ "$?" -ne 0 ]; then
				broken_lang $lang
				popd
				return 187
			fi

			log "Rendering epub and pdf"
			$PHP render.php -P PHP -d $docbook -f epub --output $out >> $LOGFILE 2>&1
			###$PHP render.php -P PHP -d $docbook -f epub -f bigpdf -f pdf --output $out >> $LOGFILE 2>&1
			if [ "$?" -ne 0 ]; then
				broken_lang $lang
				popd
				return 187
			fi

		;;

		*)
			log "Skipping all other redering formats"
		;;
	esac


	popd
	log "Finished building"
}

move()
{
	lang=$1
	out=$OUTPUTFOLDER/$lang
	otherdownload=/local/Web/sites/doc.php.net/www/downloads/

	if [ ! -d $otherdownload ]; then
		mkdir -p $otherdownload/{sqlite,epub,pdf,pdf/split,json}
	fi

	log "Moving phpweb"
	pushd $out

	fname=php_manual_$lang


	# Downloadable chunked html
	tar -czf $fname.tar.gz php-chunked-xhtml/
	mv   -f  $fname.tar.gz $DOCSWEB/distributions/manual/

	# Downloadable bightml
	gzip     php-bigxhtml.html
	mv   -f  php-bigxhtml.html.gz $DOCSWEB/distributions/manual/$fname.html.gz

	# Include the tocfeed in phpweb
	mv       php-tocfeed $out/php-web/feeds
	rm   -rf $DOCSWEB/manual/$lang
	mv   -f  php-web $DOCSWEB/manual/$lang



	case $lang in
		en)
			log "Moving SQLite download file"
			mv -f ide-sqlite.sqlite $otherdownload/sqlite/$fname.sqlite

			log "Moving epub"
			pushd php-epub
			zip -0Xq  php-manual.epub mimetype
			zip -Xr9Dq php-manual.epub *
			popd
			mv -f php-epub/php-manual.epub $otherdownload/epub/$fname.epub

			log "Generating JSON IDE format download.."
			$PHP /local/systems/gen-ide-json.php -l $lang >> $LOGFILE 2>&1
			if [ "$?" -ne 0 ]; then
				broken_lang $lang
				popd
				return 187
			fi

			# Moving PDF
			###mv -f output/php-bigpdf.pdf $otherdownload/pdf/$fname.pdf
			###rm -rf $otherdownload/pdf/split/$lang
			###mv -f output/php-pdf $otherdownload/pdf/split/$lang
		;;

		*)
			log "Not moving anything else for $lang"
		;;
	esac
	popd
}


warning()
{
	echo "=============> Something happenend when snapshotting $1" >> $LOGFILE 2>&1
	echo $2 >> $LOGFILE 2>&1
	echo "=============> Please have a look!" >> $LOGFILE 2>&1
}
broken_lang ()
{
	case $1 in
		en)
			toaddr="phpdoc@lists.php.net"
		;;

		# Slightly inconsistent mailinglist addr :)
		pt_br)
			toaddr="doc-pt-br@lists.php.net"
		;;
		*)
			toaddr="doc-$1@lists.php.net"
		;;
	esac

	warning $1 "Failed completely"

	echo -e "The $1 build of the PHP Manual is broken, so it does not validate or build. Please fix it! ;)\n\nAttached is the full log\n\nLove,\n\tThe docs.php.net server" | mail -s "This PHP Manual build is broken" -a $LOGFILE -r noreply@php.net $toaddr 
}

log() 
{
	echo "===> `date` $1" >> $LOGFILE 2>&1
}


do_lang ()
{
	LANG=$1
	XMLFILENAME=$BASEDIR/base/$TIMESTAMP-$LANG.xml
	LOGFILE=$LOGFOLDER/$TIMESTAMP/$LANG.txt

	log "Starting $LANG"

	configure $LANG $XMLFILENAME
	if [ "$?" -gt 0 ]; then
		warning $LANG "Failed configuring $LANG"
		log "Cleaning $XMLFILENAME"
		rm $XMLFILENAME
		continue
	fi

	build $LANG $XMLFILENAME
	if [ "$?" -gt 0 ]; then
		warning $LANG "Failed building $LANG"
		log "Cleaning $XMLFILENAME"
		rm $XMLFILENAME
		continue
	fi

	move $LANG
	if [ "$?" -gt 0 ]; then
		warning $LANG "Failed moving $LANG"
		log "Cleaning $XMLFILENAME"
		rm $XMLFILENAME
		continue
	fi

	log "Cleaning $XMLFILENAME"
	rm $XMLFILENAME
	log "$LANG Finished successfully"
}





pushd $BASEDIR

mkdir -p $LOGFOLDER/$TIMESTAMP
if [ $# -eq 1 ]; then
	if [ -d "$BASEDIR/$1" ]; then
		do_lang $1
	else
		echo "$1 ($BASEDIR/$1) doesn't seem to be valid language"
		exit 1
	fi
else
	for i in `/bin/ls -1 | grep -v doc-base`; do 
		if [ -d $i -a ! -f "$i/broken-language.txt" ]; then
			do_lang $i
		fi
	done
fi
popd

